<% provide(:title, 'Tópico 1') %>
<!-- Add the stylesheet to the head -->
<link rel="stylesheet" type="text/css" href="clippy.css" media="all">



<!-- Add these scripts to  the bottom of the page -->
<!-- jQuery 1.7+ -->
<script src="jquery.1.7.min.js"></script>

<!-- Clippy.js -->
<script src="clippy.min.js"></script>

<!-- Init script -->
<script type="text/javascript">
    clippy.load('F1', function(agent) {
        // Do anything with the loaded agent
        agent.show();
        agent.animate();
        agent.stop();
        agent.speak('When all else fails, bind some paper together. My name is Clippy.');

        agent.speak('outra fala');
        agent.play('Searching');agent.play('Searching');
        agente.stop();
        
        if (counter=="00:00:01"){
           alert("HI");
          
        }



    });
</script>



<script type="text/javascript">
  
  function falar(){

   alert("HI");
   agent.speak('Teste Clippy.');
  }

</script>


<script>
  closenext(){
 $("#myModal .close").click()

  }
</script>


<script>
function formatatempo(segs) {

//function por Augusto Claro
//augustoclaro1@hotmail.com
//www.seven3d.com.br
min = 0;
hr = 0;

while(segs>=60) {
if (segs >=60) {
segs = segs-60;
min = min+1;
}
}

while(min>=60) {
if (min >=60) {
min = min-60;
hr = hr+1;
}
}

if (hr < 10) {hr = "0"+hr}
if (min < 10) {min = "0"+min}
if (segs < 10) {segs = "0"+segs}
fin = hr+":"+min+":"+segs
return fin;
}
var segundos = 0; //inicio do cronometro
function conta() {
segundos++;
document.getElementById("counter").innerHTML = formatatempo(segundos);
}

function inicia(){
interval = setInterval("conta();",1000);
}

function para(){
clearInterval(interval);
tagNome();
}

function zera(){
clearInterval(interval);
segundos = 0;
document.getElementById("counter").innerHTML = formatatempo(segundos);
} 

function reinicia(){
  clearInterval(interval);
  segundos = 0;
  document.getElementById("counter").innerHTML = formatatempo(segundos);
  interval = setInterval("conta();",1000);
}
</script>



<script type="text/javascript">
  
function tagNome() {
 x = document.getElementById(cronometro.id);
 y = x.innerHTML;

 z = y.replace('<span id="counter">', '')
 time = z.replace('</span>', '')
 //alert(time); - mensagem é mostrada
 $("#tempo").val(time);



}

</script>






<%= link_to "<< Voltar", topicos_path %>
<center>
    
  <h1> Tópico 1

  <br><br>

  <!-- Button trigger modal -->
  <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModalClasse1" onclick="inicia()">
    Classes
  </button>

  <br><br>

  <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModalObjeto1" onclick="inicia()">
    Objeto
  </button>

  <br><br>

  <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModalHeranca1" onclick="inicia()">
    Herança
  </button>

   <br><br>

  <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModalPolimorfismo1" onclick="inicia()">
    Polimorfismo
  </button>

</center>


<button type="button"  onclick="falar()">Fala</button>





<!-- Modal Classe Page 1-->
<div class="modal fade" id="myModalClasse1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-backdrop="static" data-keyboard="false">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Classe</h4>
      </div>
      <div class="modal-body">

      <div align="justify"> 
      <h4>
        <b>Classe:</b> descreve que propriedades (ou <b>atributos</b>) um objeto terá e qual o comportamento dos Objetos da classe (são os chamados <b>métodos</b>).
        <br>
        <b>Especificação de uma classe:</b> é composta de <u>nome da classe</u>, <u>conjunto de atributos</u> e <u>conjunto de métodos</u>.
        <br>
        <b>Nome da classe:</b> é um identificador para a classe, que possibilita referenciá-la posteriormente.
        <b>EX:</b> pode referenciá-la no momento da criação de um objeto
      </h4>
      </div>

      <br>
      <center>
      <%=image_tag("classe.png", alt: "Logo", width: "450px")%>

     <!-- <img alt="Logo" src="app/assets/images/classe.png" /> -->
        <br>
     
      
      </center>
       
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev">Prev</button>
        <button type="button" class="btn btn-default btn-next" data-toggle="modal" data-target="#myModalClasse2" onclick="closenext()" data-dismiss="modal">Next</button>
     

         <%= label_tag :tempo, class: "form-control", id: "cronometro" do %>
           <span id="counter">00:00:00</span>
         <% end %>


     

         <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>



    </div>
  </div>
</div>




<!-- Modal Classe Page 2-->
<div class="modal fade" id="myModalClasse2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Classe</h4>
      </div>
      <div class="modal-body">

      <div align="justify"> 
      <h4>
       <b>Conjunto de atributos:</b> Descreve as propriedade da classe. Cada atributo possui um nome e um tipo associado. Pode ter também um <u>valor_default opcional</u>.
        <br><br>
          <b>Tipo:</b> Pode ser o nome de uma classe (nas lingiagens de programação orientadas a obejetos pura). Ou do grupo de tipos primitivos das lingagens de POO como inteiro, real, caracter.
          <br><br>
          <b>Valor_default opcional:</b> especifica um valor inicial para o atributo.
          <br><br>
        <b>Conjunto de métodos:</b> Definem as funcionalidades da classe, isto é, define o que será possível fazer com os objetos dessa classe. É um equivalente a um procedimento ou uma função, porém manipula apenas suas variáveis locais e atributos definidos para a classe. Cada método é especificado por uma assinatura, composta por um <u>identificador</u> para o método (<u>nome</u> do método), o <u>tipo</u> para o <u>valor</u> de retorno e sua lista de argumentos, sendo cada argumento identificado por seu tipo e nome. <br> <br>
        </div>

         <center><%=image_tag("classepessoa.png", alt: "Logo", width: "400px")%></center>
      </h4>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev" data-toggle="modal" data-target="#myModalClasse1" data-dismiss="modal">Prev</button>
        <button type="button" class="btn btn-default btn-next" data-toggle="modal" data-target="#myModalClasse3" data-dismiss="modal">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>





<!-- Modal Classe Page 3-->
<div class="modal fade" id="myModalClasse3" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
       <!-- <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button> BOTÃO FECHAR X -->
        <h4 class="modal-title" id="myModalLabel">Classe</h4>
      </div>
      <div class="modal-body">
      
      <h4> 
        <div align="justify"> 
        <b>Mecanismo de sobrecarga (overloading):</b>  através desse mecanismo dois métodos de uma mesma classe podem ter o mesmo nome, contanto que tenham assinaturas diferentes, ou seja, com argumentos diferentes. Nesse caso não há conflito, pois o compilador é capaz de detectar qual método deve ser escolhido com base nos tipos dos argumentos de cada método. A escolha do método correto é chamada de <u>ligação prematura (early binding)</u>. <br><br>
        </div>

         <center><%=image_tag("sobrecarga.png", alt: "Logo", width: "500px")%></center>

      </h4>
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev" data-toggle="modal" data-target="#myModalClasse2" data-dismiss="modal">Prev</button>
        <button type="button" class="btn btn-default btn-next" data-toggle="modal" data-target="#myModalClasse4" data-dismiss="modal">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>





<!-- Modal Classe Page 4-->
<div class="modal fade" id="myModalClasse4" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
       <!-- <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button> BOTÃO FECHAR X -->
        <h4 class="modal-title" id="myModalLabel">Classe</h4>
      </div>
      <div class="modal-body">
      
      <h4>

        <div align="justify"> 
        <b>Visibilidade:</b> Pode ser para métodos e atributos. <br><br>
        Três categorias de visibilidade podem ser definidas: <br>
        <b>Público:</b> O atributo ou método de um objeto pertencente a essa classe pode ser acessado por qualquer outro objeto (visibilidade externa total). Simbolizado em UML por +. <br>
        <b>Privado:</b> O atributo ou método de um objeto pertencente a essa classe não pode ser acessado por nenhum outro objeto (nenhuma visibilidade externa). Simbolizado em UML por -. <br>
        <b>Protegido:</b> O atributo ou método de um objeto pertencente a essa classe pode ser acessado apenas por objetos de classes que tenham herança dessa classe, ou seja, pode ser acessado apenas por objetos de classes derivadas dessa classe. Simbolizado em UML por #. <br> <br><br>
        </div>
        <center><%=image_tag("simbolosvisibilidade.png", alt: "Logo", width: "500px")%></center>

      </h4>
      
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev" data-toggle="modal" data-target="#myModalClasse3" data-dismiss="modal">Prev</button>
        <button type="button" class="btn btn-default btn-next">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>






<!-----------------------------------------------------MODAL OBJETO ABAIXO----------------------------------------------->


<!-- Modal Objeto Page 1-->
<div class="modal fade" id="myModalObjeto1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">

        <h4 class="modal-title" id="myModalLabel">Objeto</h4>
      </div>
      <div class="modal-body">
      
      <h4>
        <div align="justify"> 
        <b>Objetos:</b> São instâncias de classes. Em um sistema implementado em linguagens orientadas a objetos, basicamente todo o processamento ocorre através de objetos. <br>
        </div>

        <center><%=image_tag("representacaoobjeto.png", alt: "Logo", width: "500px")%></center>
        
        <div align="justify"> 
        Em linguagens de programação orientadas a objetos, tudo pode ser potencialmente representado como um objeto. Sob o ponto de vista desse paradigma, um objeto é similar a uma variável normal.<br>
        <b>EX:</b> Uma variável do tipo int definida em uma linguagem de programação como C ou Java possui: espaço em memória para armazenar seu estado (valor) e um conjunto de operações que podem ser aplicadas por meio dos operadores para valores inteiros definidos pela linguagem. <br>
        Da mesma maneira: um objeto criado possui um espaço em memória para armazenar seu estado (valores dos seus atributos) e um conjunto de operações aplicáveis a esse objeto (métodos definidos pela classe).
        </div>

      </h4>
      
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev">Prev</button>
        <button type="button" class="btn btn-default btn-next"  data-toggle="modal" data-target="#myModalObjeto2" data-dismiss="modal">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>




<!-- Modal Objeto Page 2-->
<div class="modal fade" id="myModalObjeto2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Objeto</h4>
      </div>
      <div class="modal-body">
      
      <h4>
        
        
        <div align="justify"> 
       Um programa orientado a objetos possui um conjunto de objetos que interagem por meio de “trocas de mensagens”, ou seja, através da aplicação de métodos a objetos.<br><br>
      <u>Recomendação:</u> Estrutura de um objeto e implementação dos seus métodos privados.<br><br>
      <b>Encapsulação:</b> é o princípio de projeto pelo qual cada componente de um programa deve agregar toda a informação relevante para sua manipulação como uma unidade (uma cápsula). É um mecanismo poderoso quando aliado ao conceito de <u>ocultamento de informação</u>. <br><br>
      <b>Ocultamento de informação:</b> princípio onde cada componente deve manter oculta sob sua guarda uma decisão de projeto única. Para a utilização desse componente, apenas o mínimo necessário para sua operação deve ser revelado (tornado público). <br><br>
      <u>Recomendação:</u> o uso da encapsulação e ocultamento de informação, que representa o estado de um objeto, deve ser mantida oculta.
      </div>

      </h4>
      
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev" data-toggle="modal" data-target="#myModalObjeto1" data-dismiss="modal">Prev</button>
        <button type="button" class="btn btn-default btn-next" data-toggle="modal" data-target="#myModalObjeto3" data-dismiss="modal">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>



<!-- Modal Objeto Page 3-->
<div class="modal fade" id="myModalObjeto3" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Objeto</h4>
      </div>
      <div class="modal-body">
      
      <h4>
        
        
      <div align="justify"> 
     <b>Interface operacional:</b> conjunto de assinaturas dos métodos públicos. <br>

      Apenas a assinatura dos métodos é revelada, desssa maneira, detalhes internos sobre a operação do objeto não são conhecidos. Assim, o usuário do objeto pode trabalhar em níveis mais altos de abstração, sem se preocupar com detalhes internos da classe. Tal fator possibilita a simplificação de programas com funcionalidades complexas.
      <br><br><br><br><br><br><br><br><br><br><br><br>
      </div>
      </h4>
      
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev" data-toggle="modal" data-target="#myModalObjeto2" data-dismiss="modal">Prev</button>
        <button type="button" class="btn btn-default btn-next">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>




<!-------------------------------------------MODAL HERANÇA ----------------------------------------------------->

<!-- Modal Herança Page 1-->
<div class="modal fade" id="myModalHeranca1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
       <!-- <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button> BOTÃO FECHAR X -->
        <h4 class="modal-title" id="myModalLabel">Herança</h4>
      </div>
      <div class="modal-body">
      
      <h4>
        
        <div align="justify"> 
        <b>Herança:</b>  Mecanismo que possibilita que as características em comum a várias classes possam ser unidas e separadas em uma classe base, a superclasse. Assim, a partir da classe base, define-se as classes mais específicas.
        As subclasses (classes mais específicas) possuem características (atributos e métodos) da classe base acrescidos as suas características particulares.<br><br>
        <b>Formas de relacionamentos em herança:</b><br>
        <b>Extensão:</b> A superclasse permanece inalterada, enquanto a subclasse estende a superclasse. Também referenciado como <u>herança estrita</u>.<br>
        <b>Especificação:</b> A superclasse não implementa nenhuma funcionalidade, ela apenas especifica o que a subclasse deve oferecer. Apenas a interface da superclasse é herdada pela sbclasse, isto é, apenas o conjunto de especificação dos métodos públicos.<br>
        <b>Combinação de extensão e especificação: </b> A subclasse herda a interface e uma implementação padrão de métodos da superclasse. A subclasse pode redefinir métodos da superclasse para especializá-los ou oferencer a implementação de um método apenas declarado pela superclasse. Esse comportamento pode ser denominado <u>herança polimórfica</u>.
        </div>


      </h4>
      
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev">Prev</button>
        <button type="button" class="btn btn-default btn-next"  data-toggle="modal" data-target="#myModalHeranca2" data-dismiss="modal">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>




<!-- Modal Herança Page 2-->
<div class="modal fade" id="myModalHeranca2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
       <!-- <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button> BOTÃO FECHAR X -->
        <h4 class="modal-title" id="myModalLabel">Herança</h4>
      </div>
      <div class="modal-body">
      
      <h4>
        
        <div align="justify"> 
       Algumas linguagens possuem tamém outra forma de relacionamento:<br><br>
      <u>Contração:</u> A subclasse elimina métodos da superclasse com o objetivo de criar uma “classe mais simples”. Para realizar a eliminação, ocorre a redefinição de métodos com o corpo vazio. Porém esse mecanismo viola os princípios da substituição, pois uma subclasse não poderá ser utilizada em todos os pontos onde a superclasse puder ser utilizada. Esse mecanismo deve ser evitado, se for detectada sua necessidade, o melhor a fazer é reanalizar a hierarquia de classes e detectar as inconsisências.
      <br><br><br><br><br><br><br><br><br>
      </div>



      </h4>
      
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default btn-prev" data-toggle="modal" data-target="#myModalHeranca1" data-dismiss="modal">Prev</button>
        <button type="button" class="btn btn-default btn-next">Next</button>
        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="para()">Fechar</button>
      </div>
    </div>
  </div>
</div>






<!--
<div style="text-align: right;"> 
Fonte: Ricarte, I. "Programação Orientada a Objetos: <br>Uma Abordagem com Java". Unicamp: Campinas. <br>Disponível no <a href="http://www.dca.fee.unicamp.br/cursos/PooJava/Aulas/poojava.pdf">Link</a>. Acesso em: 20/09/2017.
</div>
-->
